from pathlib import Path

from PySide6.QtGui import QColor
from PySide6.QtWidgets import QWidget, QVBoxLayout, QLineEdit, QPushButton

from meta import FileFormat
from ._plugin import get_int_from_qcolor, ConfigFilePlugin


class Brave(ConfigFilePlugin):
    def __init__(self):
        super().__init__(
            Path.home() / '.config/BraveSoftware/Brave-Browser/Default/Preferences',
            file_format=FileFormat.JSON
        )

        self.theme_light = '#ffffff'
        self.theme_dark = '#000000'

    def update_config(self, color_str: str):
        color = get_int_from_qcolor(QColor(color_str))

        config = self.config
        config['autogenerated']['theme']['color'] = color
        return config

    def get_input(self, widget):
        widgets = []

        for dark_theme in [False, True]:
            grp = QWidget(widget)
            horizontal_layout = QVBoxLayout(grp)

            line = QLineEdit(grp)
            color_str = self.theme_dark if dark_theme else self.theme_light
            line.setText(color_str)
            color = QColor(color_str)
            line.setStyleSheet(f'background-color: {color_str};'
                               f' color: {"white" if color.lightness() <= 128 else "black"}')
            horizontal_layout.addWidget(line)

            btn = QPushButton()
            btn.setText(f'Pick {"dark" if dark_theme else "light"} color')
            horizontal_layout.addWidget(btn)

            widgets.append(grp)

        return widgets

    @property
    def available(self) -> bool:
        return self.config_path.is_file()
